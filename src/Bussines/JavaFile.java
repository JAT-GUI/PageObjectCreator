/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Bussines;

import Data.values;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JTable;

/**
 *
 * @author Brayam Machicado
 */
public class JavaFile implements MyFile {

    String type;
    String name;
    String header;
    private String body;
    private String footer;
    private String author;
    private final SimpleDateFormat format = new SimpleDateFormat("MM-dd-yyyy");

    public JavaFile(String name, String type, String rootPath, String sourcePath, String author) {
        this.name = name;
        this.type = type;
        this.header = "/*\n"
                + " * " + name + ".java    " + format.format(new Date()) + "\n"
                + " * Generated by JAT-GUI\n"
                + " * JAT-GUI author : Brayam Machicado Vidangos\n"
                + " */\n" + values.kwPackage + obtener_package(rootPath, sourcePath) + " \n"
                + "import org.testng.Assert;\n"
                + "import org.openqa.selenium.WebDriver;\n"
                + "import org.openqa.selenium.WebElement;\n"
                + "import org.testng.Reporter;\n"
                + "import com.common.business.PageObjectBase;\n"
                + "import com.common.data.ElementPath;\n"
                + iniciar_clase();

        this.body = "";
        this.footer = "";
        this.author = author;
    }

    @Override
    public String getType() {
        return type;
    }

    @Override
    public void setType(String type) {
        this.type = type;
    }

    @Override
    public String getName() {
        return name;
    }

    @Override
    public void setName(String name) {
        this.name = name;
    }

    @Override
    public String getHeader() {
        return header;
    }

    @Override
    public void setHeader(String header) {
        this.header = header;
    }

    @Override
    public String getBody() {
        return body;
    }

    @Override
    public void setBody(String body) {
        this.body = body;
    }

    @Override
    public String getFooter() {
        return footer;
    }

    @Override
    public void setFooter(String footer) {
        this.footer = footer;
    }

    @Override
    public String absoluteName() {
        return name + values.pto + type;
    }

    @Override
    public String build_line(String name_property, String target, String type, boolean key, boolean button) {

        String methods = getEnabledFunction(name_property) + values.br + getDisplayedFunction(name_property) + values.br;
        if (button) {
            methods = methods + getClickMethod(name_property) + values.br;
        }
        if (key) {
            methods = methods + getPutMethod(name_property) + values.br;
        }
        return methods;
    }

    public String getValidateFunction(JTable table) {
        String content = "        /**\n"
                + "	 * This function demonstrates validate" + name + "Elements().\n"
                + "	 * <br>Function provides all @Tests with a function to validate elements on the " + name + ".\n"
                + "	 * <br>\n"
                + "	 * @param showWarnings - if true will only show warning messages if elements are not present.\n"
                + "	 * <br> False will throw errors if elements are not found. \n"
                + "	 * @return none\n"
                + "	 * @author " + author + "\n"
                + "	 * @version 1.0  \n"
                + "	 */\n"
                + "	public void validate" + name + "Elements(boolean showWarnings){\n"
                + "		\n"
                + "		if(showWarnings){\n"
                + "			\n";
        String partA = "";
        String partB = "";
        for (int i = 0; i < table.getRowCount(); i++) {
            String string = (String) table.getValueAt(i, 0);
            String name_propertyMethods = ((char) (string.charAt(0) - 32)) + string.substring(1);
            partA += "			if(!is" + name_propertyMethods + "Displayed()) Reporter.log(\"Warning: " + string + " missing on " + name + "\",true);\n" + "			\n";
            partB += "			Assert.assertTrue(is" + name_propertyMethods + "Displayed());\n";
        }
        content += partA + "		}else{  // Throw errors\n";
        content += partB + "		}\n"
                + "		\n"
                + "	}";

        return content;
    }

    private String getEnabledFunction(String name_property) {
        String name_propertyMethods = ((char) (name_property.charAt(0) - 32)) + name_property.substring(1);
        String comment = "	/**\n"
                + "	 * This function Demonstrates is" + name_propertyMethods + "Enabled().\n"
                + "	 * <br>\n"
                + "	 * @exception Catches Exception if element not found\n"
                + "	 * @author " + author + "\n"
                + "	 * @version 1.0\n"
                + "	 */ \n";
        String res = "      public boolean is" + name_propertyMethods + "Enabled(){\n"
                + "		try{\n"
                + "			WebElement element = findElement(" + name_property + ");\n"
                + "			return(element.isEnabled());\n"
                + "		}catch (Exception e){\n"
                + "			return false;\n"
                + "		}\n"
                + "	} \n";
        return comment + res;
    }

    private String getDisplayedFunction(String name_property) {
        String name_propertyMethods = ((char) (name_property.charAt(0) - 32)) + name_property.substring(1);
        String comment = "	/**\n"
                + "	 * This function Demonstrates is" + name_propertyMethods + "Displayed().\n"
                + "	 * <br>\n"
                + "	 * @exception Catches Exception if element not found\n"
                + "	 * @author " + author + "\n"
                + "	 * @version 1.0\n"
                + "	 */ \n";
        String res = "      public boolean is" + name_propertyMethods + "Displayed(){\n"
                + "		try{\n"
                + "			WebElement element = findElement(" + name_property + ");\n"
                + "			return(element.isDisplayed());\n"
                + "		}catch (Exception e){\n"
                + "			return false;\n"
                + "		}\n"
                + "	} \n";
        return comment + res;
    }

    private String getClickMethod(String name_property) {
        String name_propertyMethods = ((char) (name_property.charAt(0) - 32)) + name_property.substring(1);
        String comment = "/**\n"
                + "	 * This function demonstrates click" + name_propertyMethods + "().\n"
                + "	 * <br>Function to click the element: " + name_propertyMethods + " \n"
                + "	 * <br> \n"
                + "	 * @param None\n"
                + "	 * @returns none.\n"
                + "	 * @exception None.\n"
                + "	 * @author " + author + "\n"
                + "	 * @version 1.0\n"
                + "	 */ \n";
        String res = "        public void click" + name_propertyMethods + "(){\n"
                + "		try{\n"
                + "			WebElement element = findElement(" + name_property + ");\n"
                + "			element.click();\n"
                + "		}catch (Exception e){\n"
                + "			Reporter.log(\"Failed to click on the element: " + name_property + "\");\n"
                + "			e.printStackTrace();\n"
                + "		}\n"
                + "	} \n";

        return comment + res;
    }

    private String getPutMethod(String name_property) {
        String name_propertyMethods = ((char) (name_property.charAt(0) - 32)) + name_property.substring(1);
        String comment = "/**\n"
                + "	 * This function demonstrates enter" + name_propertyMethods + "Text().\n"
                + "	 * <br>Function to enter text into the " + name_propertyMethods + "\n"
                + "	 * @param text"
                + "	 * @returns none.\n"
                + "	 * @exception None.\n"
                + "	 * @author " + author + "\n"
                + "	 * @version 1.0\n"
                + "	 */		";
        String res = "	public void enter" + name_propertyMethods + "Text(String text){\n"
                + "		try{\n"
                + "			WebElement element = findElement(" + name_property + ");\n"
                + "                       element.clear();\n"
                + "			element.sendKeys(text);\n"
                + "		}catch (Exception e){\n"
                + "			Reporter.log(\"Failed to put data on the element: " + name_property + "\");\n"
                + "			e.printStackTrace();\n"
                + "		}\n"
                + "	}";

        return comment + res;
    }

    private String obtener_package(String rootPath, String destinyPath) {
        String packageDestiny;
        //packageDestiny = destinyPath.split(rootPath)[1];
        packageDestiny = destinyPath.substring(rootPath.length());
        packageDestiny = packageDestiny.replace('\\', '.');
        return packageDestiny;
    }

    public String iniciar_clase() {
        return values.kwPublic + values.kwClass + name + " " + values.kwExtends + "PageObjectBase" + values.lla + values.br;

    }

    public String armar_recursos(String propertyPath, String propertyName) {
        String salida = "static ResourceBundle resources;\n"
                + "		static\n"
                + "		{\n"
                + "			try\n"
                + "			{\n"
                + "				resources = ResourceBundle.getBundle(\"" + obtener_pathProperty(propertyPath, propertyName) + "\",Locale.getDefault());\n"
                + "			} catch (MissingResourceException mre) {\n"
                + "				System.out.println(\"" + propertyName + ".properties" + " not found: \"+mre);\n"
                + "				System.exit(0);\n"
                + "			}\n"
                + "		}\n";
        return salida;
    }

    public String obtener_pathProperty(String propertyPath, String propertyName) {
        String packg = "";
        try {
            int r = propertyPath.indexOf("resources") + 10;
            packg = propertyPath.substring(r);
            packg = packg.replace('\\', '.');

        } catch (StringIndexOutOfBoundsException e) {
            return "";
        }

        return packg + values.pto + propertyName;
    }

    public String cerrar_clase() {
        return values.br + " " + values.llc;
    }

    public String armar_constructor(String URL) {
        String salida = "       public " + name + " (WebDriver driver){\n"
                + "			\n"
                + "			super(driver);\n"
                + "			setPageURL(\"" + URL + "\");\n"
                + "			\n"
                + "		}\n";

        return salida;
    }

    public String declarar_variable(String var_name, String var_type, String var_path) {
        String var = "private String " + var_name + "= new ElementPath(ElementPath." + var_path + ",\"" + var_path + "\");" + values.br;
        return var;
    }
}
